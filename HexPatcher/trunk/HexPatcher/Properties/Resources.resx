<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppBackupExtension" xml:space="preserve">
    <value>.backup</value>
  </data>
  <data name="AppUppercaseCharYes" xml:space="preserve">
    <value>S</value>
  </data>
  <data name="ErrBackupFailed" xml:space="preserve">
    <value>
Error: No se puede crear el archivo de respaldo.</value>
  </data>
  <data name="ErrCantQueryInQuietMode" xml:space="preserve">
    <value>
Error: No puede confirmar los cambios en el modo silencioso.</value>
  </data>
  <data name="ErrCantReadInputFile" xml:space="preserve">
    <value>
Error: No se puede leer el archivo, no existe o no es accesible.</value>
  </data>
  <data name="ErrHexSeqInvalid" xml:space="preserve">
    <value>
Error: Las secuencias hexadecimales no tienen un formato correcto.</value>
  </data>
  <data name="ErrHexSeqMustHasEvenLength" xml:space="preserve">
    <value>
Error: Las secuencias hexadecimales deben tener un largo par.</value>
  </data>
  <data name="ErrInvalidArgs" xml:space="preserve">
    <value>
Error: Argumentos inválidos en la línea de comandos.</value>
  </data>
  <data name="ErrSaveFailed" xml:space="preserve">
    <value>
Error: No se puede guardar el archivo.</value>
  </data>
  <data name="HelpCommandLineParameters" xml:space="preserve">
    <value>HEXPATCHER origen [reemplazo] [-max n] [-query] [-noBackup] [-quiet]
[-startFrom inicio] [-startWith segmento] [-verbose] [-help] archivo</value>
  </data>
  <data name="HelpDescription" xml:space="preserve">
    <value>Realiza reemplazos de segmentos hexadecimales en un archivo binario.</value>
  </data>
  <data name="HelpParametersDetails" xml:space="preserve">
    <value>  origen		Segmento hexadecimal de origen
  reemplazo		Segmento hexadecimal de reemplazo
  -max n		Define un máximo n de reemplazos
  -query		Solicitar una confirmación por cada reemplazo
  -noBackup		No generar ningún respaldo
  -quiet		No mostrar mensajes ni errores (silencioso)
  -startFrom inicio	Define la coincidencia inicial para los reemplazos
  -startWith segmento	Define un segmento hexadecimal como punto de partida
  -verbose		Mostrar información adicional del proceso
  -help			Muestra esta pantalla informativa
  archivo		Ruta del archivo</value>
  </data>
  <data name="HelpRemarks" xml:space="preserve">
    <value>Los parámetros origen, reemplazo y segmento pueden incluir comodines, así
puede definir cada dos bytes el comodín "??" que coincidirá con cualquier
pareja de bytes en el archivo en donde se realizarán los reemplazos. En el
caso del segmento de reemplazo, un comodín sólo conservará los valores
originales del archivo.</value>
  </data>
  <data name="InfoBackupFailed" xml:space="preserve">
    <value>No se creó un archivo de respaldo</value>
  </data>
  <data name="InfoFinished" xml:space="preserve">
    <value>Fin del programa</value>
  </data>
  <data name="InfoInitializationReady" xml:space="preserve">
    <value>Inicialización lista</value>
  </data>
  <data name="InfoMatchFound" xml:space="preserve">
    <value>Segmento encontrado en la posición {0}</value>
  </data>
  <data name="InfoMatchNotReplaced" xml:space="preserve">
    <value>Reemplazo no efectuado en la posición {0}</value>
  </data>
  <data name="InfoMatchReplaced" xml:space="preserve">
    <value>Reemplazo efectuado en la posición {0}</value>
  </data>
  <data name="InfoNoChanges" xml:space="preserve">
    <value>No se produjo ningún cambio en el archivo</value>
  </data>
  <data name="InfoNoMoreReplacements" xml:space="preserve">
    <value>No hay más reemplazos que efectuar</value>
  </data>
  <data name="InfoPreparingOutputFile" xml:space="preserve">
    <value>Preparando el archivo de salida</value>
  </data>
  <data name="InfoReachedMaxReplacements" xml:space="preserve">
    <value>Alcanzado el máximo restringido por el usuario</value>
  </data>
  <data name="InfoSearchingBeginMain" xml:space="preserve">
    <value>Inicio de la secuencia de búsqueda</value>
  </data>
  <data name="InfoSearchingBeginStartup" xml:space="preserve">
    <value>Inicio de búsqueda de segmento inicial</value>
  </data>
  <data name="InfoStartupSeqNotFound" xml:space="preserve">
    <value>No se encontró la secuencia de inicio</value>
  </data>
  <data name="MsgAppFinished" xml:space="preserve">
    <value>
Programa terminado.
</value>
  </data>
  <data name="MsgMatchFoundQuery" xml:space="preserve">
    <value>Se encontró un segmento para reemplazar en la posición {0}
 ¿Desea efectuar el reemplazo? (S/N)</value>
  </data>
  <data name="MsgNoChanges" xml:space="preserve">
    <value>
Ningún cambio realizado.
</value>
  </data>
  <data name="MsgTotalChanges" xml:space="preserve">
    <value>
{0} cambio(s) realizado(s).
</value>
  </data>
</root>