<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HelpCommandLineParameters" xml:space="preserve">
    <value>HEXPATCHER hexsource [hexreplace] [-max n] [-query] [-noBackup] [-quiet]
[-startFrom start] [-startWith hex] [-verbose] [-help] file</value>
  </data>
  <data name="ErrHexSeqMustHasEvenLength" xml:space="preserve">
    <value>
Error: Hexadecimal strings must has an even length.</value>
  </data>
  <data name="InfoFinished" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="ErrBackupFailed" xml:space="preserve">
    <value>
Error: Can't write backup file.</value>
  </data>
  <data name="AppBackupExtension" xml:space="preserve">
    <value>.backup</value>
  </data>
  <data name="ErrHexSeqInvalid" xml:space="preserve">
    <value>
Error: Invalid hexadecimal strings.</value>
  </data>
  <data name="InfoMatchNotReplaced" xml:space="preserve">
    <value>Not replaced match in offset {0}</value>
  </data>
  <data name="InfoMatchReplaced" xml:space="preserve">
    <value>Replaced match in offset {0}</value>
  </data>
  <data name="InfoNoChanges" xml:space="preserve">
    <value>Finished without changes</value>
  </data>
  <data name="InfoInitializationReady" xml:space="preserve">
    <value>Initialization</value>
  </data>
  <data name="AppUppercaseCharYes" xml:space="preserve">
    <value>Y</value>
  </data>
  <data name="HelpDescription" xml:space="preserve">
    <value>Hexadecimal patcher for files, find and replaces.</value>
  </data>
  <data name="InfoPreparingOutputFile" xml:space="preserve">
    <value>Setting up output file</value>
  </data>
  <data name="ErrCantQueryInQuietMode" xml:space="preserve">
    <value>
Error: Can't set -query mode while -quiet is enabled too.</value>
  </data>
  <data name="ErrInvalidArgs" xml:space="preserve">
    <value>
Error: Invalid command line arguments.</value>
  </data>
  <data name="InfoMatchFound" xml:space="preserve">
    <value>Match found in offset {0}</value>
  </data>
  <data name="MsgMatchFoundQuery" xml:space="preserve">
    <value>Match found in offset {0}
 Do you want to replace this match? (Y/N)</value>
  </data>
  <data name="InfoReachedMaxReplacements" xml:space="preserve">
    <value>Reached max replacements (-max)</value>
  </data>
  <data name="MsgNoChanges" xml:space="preserve">
    <value>
No changes to file.
</value>
  </data>
  <data name="HelpParametersDetails" xml:space="preserve">
    <value>  hexsource		Hex string to find
  hexreplace		Hex string to replace
  -max n		Don't replace more than n times
  -query		Query user before each replacement
  -noBackup		Don't create any backup file
  -quiet		Hide messages and errors
  -startFrom start	First match to begin replacements
  -startWith hex	Find this hex string and begin from there
  -verbose		Show debug messages and alerts
  -help			Display this help
  file			Input file path</value>
  </data>
  <data name="InfoNoMoreReplacements" xml:space="preserve">
    <value>No more replacements to do</value>
  </data>
  <data name="MsgAppFinished" xml:space="preserve">
    <value>
Finished.
</value>
  </data>
  <data name="ErrCantReadInputFile" xml:space="preserve">
    <value>
Error: Can't open input file, check privileges or if the file exists.</value>
  </data>
  <data name="HelpRemarks" xml:space="preserve">
    <value>You may set wildcards in hexsource, hexreplace and hex strings. Just use
an "??" if you want to match any hex value in some part of your strings.
Wildcards inside hexreplace string just represents original file data.</value>
  </data>
  <data name="InfoStartupSeqNotFound" xml:space="preserve">
    <value>Not found -startWith hex string in file, try removing this parameter</value>
  </data>
  <data name="InfoSearchingBeginMain" xml:space="preserve">
    <value>Search begin</value>
  </data>
  <data name="ErrSaveFailed" xml:space="preserve">
    <value>
Error: Can't save output file.</value>
  </data>
  <data name="MsgTotalChanges" xml:space="preserve">
    <value>
{0} change(s) applied to file.
</value>
  </data>
  <data name="InfoBackupFailed" xml:space="preserve">
    <value>No backup file created</value>
  </data>
  <data name="InfoSearchingBeginStartup" xml:space="preserve">
    <value>Searching first offset defined by user</value>
  </data>
</root>